<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ProductsTest extends TestCase
{

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->actingAs(User::first());
    }

    public function test_products_index_has_products()
    {
        $response = $this->get(route('products.index'));
        $response->assertViewHas('products');
    }

    public function test_products_index_has_non_empty_products()
    {
        $response = $this->get(route('products.index'));
        $response->assertViewHas('products', function ($products) {
            return $products->isNotEmpty();
        });
    }

    public function test_products_create_form_visible()
    {
        $response = $this->get(route('products.create'));
        $response->assertViewIs('products.create');
    }

    public function test_store_validation_with_valid_data()
    {
        $validData = [
            'product_name' => 'Test Product',
            'product_unit_price' => 0.25
        ];

        $response = $this->post(route('products.store'), $validData);
        $response->assertRedirect(route('products.index'));
    }

    public function test_store_validation_fails_with_invalid_data()
    {
        $invalidData = [
            'product_name' => '', // required
            'product_unit_price' => 'invalid', // must be decimal
            'product_weight_g' => 'not-a-number', // must be numeric
            'product_qty_per_pack' => 'also-wrong', // must be numeric
        ];

        $response = $this->post(route('products.store'), $invalidData);

        $response->assertSessionHasErrors([
            'product_name',
            'product_unit_price',
            'product_weight_g',
            'product_qty_per_pack',
        ]);
    }
}
